#!/usr/bin/python3
# SPDX-License-Identifier: GPL-3.0-or-later

#
# Copyright 2023, 2024 Ian Pilcher <arequipeno@gmail.com>
#
# ACME Cert Getter - https://github.com/ipilcher/acg
#

import acme.challenges
import acme.client
import acme.messages
import argparse
import base64
import cryptography.hazmat.primitives.serialization as serialization
import cryptography.x509 as x509
import datetime
import errno
import josepy
import logging
import logging.handlers
import os
import sys


CONFIG_DIR = '/etc/acg'
STATE_DIR = '/var/lib/acg'
CHALLENGE_DIR = '/var/www/acme-challenge'

LE_URLS = [
    # production == False (0)
    'https://acme-staging-v02.api.letsencrypt.org/directory',
    # production == True (1)
    'https://acme-v02.api.letsencrypt.org/directory'
]

LOGGER = logging.getLogger(__name__)


#
#    Parse command-line arguments
#

def parse_args():

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--production', help="use Let's Encrypt production environment",
        action='store_true'
    )
    parser.add_argument(
        '-d', '--debug', help='log debugging messages', action='store_true'
    )
    parser.add_argument(
        '-t', '--tty', help='log to terminal (stderr) instead of syslog',
        action='store_true'
    )
    parser.add_argument(
        '-f', '--force', help='force refresh (ignore existing certificate)',
        action='store_true'
    )
    parser.add_argument(
        'hostname', help='the hostname of the certificate to be updated'
    )
    return parser.parse_args()


#
#    Set up logging
#

def logging_init(args):

    LOGGER.setLevel(logging.DEBUG if args.debug else logging.INFO)
    LOGGER.propagate = False

    if args.tty:
        LOGGER.addHandler(logging.StreamHandler())
    else:
        LOGGER.addHandler(logging.handlers.SysLogHandler(address='/dev/log'))

    LOGGER.debug(f'Logging to {"STDERR" if args.tty else "SYSLOG"}')


#
#    Check expiration of existing certificate
#

def check_cert_life(hostname, min_days):

    cert_filename = f'{STATE_DIR}/{hostname}.crt'

    try:
        with open(cert_filename, 'rb') as cert_file:
            cert = x509.load_pem_x509_certificate(cert_file.read())
    except EnvironmentError as e:
        if e.errno == errno.ENOENT:
            LOGGER.info(f'No existing certificate found for {hostname}')
            return
        else:
            raise

    cert_life = cert.not_valid_after_utc - datetime.datetime.now(datetime.UTC)

    if cert_life > datetime.timedelta(days=min_days):
        LOGGER.info(
            f'Certificate for {hostname} has {cert_life.days} remaining; '
            'exiting'
        )
        sys.exit(0)

    LOGGER.debug(
        f'Certificate for {hostname} has {cert_life.days} days remaining'
    )


#
#    Load the Let's Encrypt client key
#

def load_client_key(hostname):

    key_filename = f'{CONFIG_DIR}/private/{hostname}-acme-client.key'

    with open(key_filename, 'rb') as key_file:
        key_pem = key_file.read()

    rsakey = serialization.load_pem_private_key(key_pem, None)
    jwk = josepy.JWKRSA(key=rsakey)
    LOGGER.debug(f'Loaded client key from {key_filename}')
    return jwk


#
#    Load or retrieve the account URI
#

def get_account_uri(jwk, hostname, production):

    if production:
        uri_filename = f'{STATE_DIR}/{hostname}-account'
    else:
        uri_filename = f'{STATE_DIR}/{hostname}-staging-account'

    try:
        with open(uri_filename, 'r') as uri_file:
            uri = uri_file.read()
            LOGGER.debug(f'Loaded account URI from {uri_filename}')
            return uri
    except EnvironmentError as e:
        if e.errno != errno.ENOENT:
            raise

    LOGGER.debug(f'Account URI cache ({uri_filename}) not present')

    # https://community.letsencrypt.org/t/acme-python-clientv2-not-able-to-renew-a-certificate-without-enrolling-new-account/103452/3
    reg = acme.messages.NewRegistration(
        key=jwk.public_key(), only_return_existing=True
    )
    net = acme.client.ClientNetwork(jwk)
    directory = acme.messages.Directory.from_json(
        net.get(LE_URLS[production]).json()
    )
    client = acme.client.ClientV2(directory, net)
    regr = client._regr_from_response(
        client._post(directory['newAccount'], reg)
    )

    LOGGER.debug(f'Got account URI: {regr.uri}')

    with open(uri_filename, 'w') as uri_file:
        uri_file.write(regr.uri)

    LOGGER.debug(f'Cached account URI at {uri_filename}')

    return regr.uri


#
#    Create an ACME client
#

def create_client(jwk, acct_uri, production):

    client_net = acme.client.ClientNetwork(
        jwk, account=acme.messages.RegistrationResource(uri=acct_uri)
    )
    directory = acme.messages.Directory.from_json(
        client_net.get(LE_URLS[production]).json()
    )
    return acme.client.ClientV2(directory, net=client_net)


#
#    Load the certificate signing request
#

def load_csr(hostname):

    csr_filename = f'{STATE_DIR}/{hostname}.csr'

    with open(csr_filename, 'rb') as csr_file:
        csr = csr_file.read()

    LOGGER.debug(f'Loaded CSR for {hostname} from {csr_filename}')

    return csr


#
#    Find the HTTP-01 challenge in an order
#

def get_http01_challenge(order):

    for authr in order.authorizations:
        for challenge in authr.body.challenges:
            if isinstance(challenge.chall, acme.challenges.HTTP01):
                return challenge

    raise Exception('ACME server did not offer HTTP-01 challenge')


#
#    Execute the challenge
#

def execute_challenge(client, csr, hostname):

    order = client.new_order(csr)
    challenge = get_http01_challenge(order)
    response, validation = challenge.response_and_validation(client.net.key)

    validation_filename = f'{CHALLENGE_DIR}/{challenge.path.split('/')[-1]}'

    with open(validation_filename, 'w') as validation_file:
        validation_file.write(validation)

    LOGGER.debug(f'Wrote validation file to {validation_filename}')

    client.answer_challenge(challenge, response)
    order = client.poll_and_finalize(order)

    if order.body.status != acme.messages.STATUS_VALID:
        raise Exception(f'Order status ({order.body.status.name} is not VALID')

    LOGGER.debug('Got VALID order from ACME server')

    os.remove(validation_filename)

    LOGGER.debug(f'Removed validation file ({validation_filename})')

    # This assumes that the server certificate is first in the PEM chain
    fullchain_pem = order.fullchain_pem.encode('ascii')
    cert = x509.load_pem_x509_certificate(fullchain_pem)

    cn = cert.subject.get_attributes_for_oid(x509.oid.NameOID.COMMON_NAME)[0]
    assert cn.value == hostname

    LOGGER.debug(f'Got certificate for {hostname}')

    return cert


#
#    Write the new certificate
#

def write_certificate(cert, hostname):

    cert_filename = f'{STATE_DIR}/{hostname}.crt'

    with open(cert_filename, 'wb') as cert_file:
        cert_file.write(cert.public_bytes(serialization.Encoding.PEM))

    LOGGER.info(f'Wrote new certificate for {hostname} to {cert_filename}')
    LOGGER.info(
        'New certificate valid until '
        f'{cert.not_valid_after_utc:%Y-%m-%d %H:%M:%S %Z}'
    )


def main():

    args = parse_args()
    logging_init(args)

    if not args.force:
        check_cert_life(args.hostname, 30)

    csr = load_csr(args.hostname)
    client_key = load_client_key(args.hostname)
    acct_uri = get_account_uri(client_key, args.hostname, args.production)
    client = create_client(client_key, acct_uri, args.production)
    cert = execute_challenge(client, csr, args.hostname)
    write_certificate(cert, args.hostname)
    open('/run/acg/httpd-reload', 'a')

    LOGGER.info('Great success!')


if __name__ == '__main__':
    main()


# kate: indent-width 4; replace-tabs on;
